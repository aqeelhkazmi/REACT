
# set working directory to data so it can be loaded
setwd("../REDD/low_freq/house_1/")

# load required libraries
library("ggplot2")
library("e1071")
library("randomForest")
library("HMM")
library("zoo")
library("fpc")
library("cluster") 
library("reshape")
library("cpm")

# checking labels dat file
labels.data <- read.table("labels.dat", header=TRUE)
labels.data

####################### saving
write.table(labels.data, "labels.txt", sep="\t", col.names=FALSE, row.names = FALSE)
####################### saving

# load data from .dat files
main.1.data <- read.table("channel_1.dat", header=TRUE)
main.2.data <- read.table("channel_2.dat", header=TRUE)
head(main.1.data) # check top 6 data rows
head(main.2.data) # check top 6 data rows

####################### saving for testingg
write.table(head(main.2.data), "main.txt", sep="\t", col.names=FALSE, row.names = FALSE)
####################### saving for testing

# puting power data into main.1.power and main.2.power
main.1.power <- main.1.data[,2]
main.2.power <- main.2.data[,2]
summary(main.1.power)
summary(main.2.power)

# converting date time from epoch to numpy datetime 64 type
main.date.time <- main.1.data[,1]
main.date.time <- as.POSIXlt(main.date.time, origin ='1970-01-01', tz='Europe/Dublin')
head(main.date.time)

# combining mains data frames.
main.all.data <- data.frame(main_date_time=main.date.time, main_1_power= main.1.power, main_2_power= main.2.power)
head(main.all.data)

# ploting the data into a graph
plot(main.all.data$main_1_power ~ main.all.data$main_date_time, type="l", main="REDD: house 1 main 1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(main.all.data$main_2_power ~ main.all.data$main_date_time, type="l", main="REDD: house 1 main 2", xlab="Date/Time",ylab="Real Power (Watts)")

####################### plotting for testing
plot(main.all.data$main_1_power ~ main.all.data$main_date_time, type="l", main="", xlab="Date/Time",ylab="Real Power (Watts)", xaxt="n") 
axis(1, at=seq(from=main.all.data$main_date_time[1], by="day", length.out = length(main.all.data$main_1_power)), labels=strftime(seq(from=main.all.data$main_date_time[1], by="day", length.out = length(main.all.data$main_1_power)), format="%d/%m"))

plot(main.all.data$main_2_power ~ main.all.data$main_date_time, type="l", main="", xlab="Date/Time",ylab="Real Power (Watts)", xaxt="n") 
axis(1, at=seq(from=main.all.data$main_date_time[1], by="day", length.out = length(main.all.data$main_2_power)), labels=strftime(seq(from=main.all.data$main_date_time[1], by="day", length.out = length(main.all.data$main_2_power)), format="%d/%m"))
#######################

# checking labels dat file
labels.data <- read.table("labels.dat", header=TRUE)
labels.data

# now loading all the data for each appliances in home 2
oven_1 <- read.table("channel_3.dat", header=TRUE)
oven_2 <- read.table("channel_4.dat", header=TRUE)
refrigerator <- read.table("channel_5.dat", header=TRUE)

####################### saving for testing
write.table(head(refrigerator), "refrigerator.txt", sep="\t", col.names=FALSE, row.names = FALSE)
####################### saving for testing

dishwasher <- read.table("channel_6.dat", header=TRUE)
kitchen_outlets_1 <- read.table("channel_7.dat", header=TRUE)
kitchen_outlets_2 <- read.table("channel_8.dat", header=TRUE)
lighting_1 <- read.table("channel_9.dat", header=TRUE)
washer_dryer_1 <- read.table("channel_10.dat", header=TRUE)
microwave <- read.table("channel_11.dat", header=TRUE)
bathroom_gfi <- read.table("channel_12.dat", header=TRUE)
electric_heat <- read.table("channel_13.dat", header=TRUE)
stove <- read.table("channel_14.dat", header=TRUE)
kitchen_outlets_3 <- read.table("channel_15.dat", header=TRUE)
kitchen_outlets_4 <- read.table("channel_16.dat", header=TRUE)
lighting_2 <- read.table("channel_17.dat", header=TRUE)
lighting_3 <- read.table("channel_18.dat", header=TRUE)
washer_dryer_2 <- read.table("channel_19.dat", header=TRUE)
washer_dryer_3 <- read.table("channel_20.dat", header=TRUE)

# converting date time for appliance data
appliance.date.time <- as.POSIXlt(oven_1[,1], origin ='1970-01-01', tz='Europe/Dublin')
head(appliance.date.time)

# creating data frame for all appliance data
appliance.all.data <- data.frame(appliance_date_time=appliance.date.time, 
                                 oven_1= oven_1[,2], oven_2= oven_2[,2], refrigerator= refrigerator[,2], 
                                 dishwasher=dishwasher[,2], kitchen_outlets_1=kitchen_outlets_1[,2], kitchen_outlets_2=kitchen_outlets_2[,2], 
                                 lighting_1=lighting_1[,2], washer_dryer_1=washer_dryer_1[,2], microwave=microwave[,2], 
                                 bathroom_gfi=bathroom_gfi[,2], electric_heat=electric_heat[,2], stove=stove[,2], 
                                 kitchen_outlets_3=kitchen_outlets_3[,2], kitchen_outlets_4=kitchen_outlets_4[,2],lighting_2=lighting_2[,2],
                                 lighting_3=lighting_3[,2], washer_dryer_2=washer_dryer_2[,2],washer_dryer_3=washer_dryer_3[,2])
head(appliance.all.data)
summary(appliance.all.data)

# now lets remove the each appliance's data frame; we don't need them any more
rm(labels.data, start.time, end.time, main.1.data, main.2.data, main.1.power, main.2.power,main.date.time, appliance.date.time, microwave,bathroom_gfi,electric_heat,stove, oven_1,oven_2,refrigerator,dishwasher,kitchen_outlets_1,kitchen_outlets_2,kitchen_outlets_3,kitchen_outlets_4,lighting_1,lighting_2,lighting_3,washer_dryer_1,washer_dryer_2,washer_dryer_3)

# plot each appliance and observe if any missing data 
plot(appliance.all.data$oven_1 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 oven_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$oven_2 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 oven_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$kitchen_outlets_1 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$kitchen_outlets_2 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$kitchen_outlets_3 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$kitchen_outlets_4 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_4", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$lighting_1 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 lighting_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$lighting_2 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 lighting_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$lighting_3 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 lighting_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$washer_dryer_1 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$washer_dryer_2 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$washer_dryer_3 ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$bathroom_gfi ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 bathroom_gfi", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$stove ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 stove", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$microwave ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 microwave", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$electric_heat ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 electric_heat", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$refrigerator ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 refrigerator", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliance.all.data$dishwasher ~ appliance.all.data$appliance_date_time, type="l", main="REDD: house 1 dishwasher", xlab="Date/Time",ylab="Real Power (Watts)")

# mains starting/ending time and appliance starting and ending times
main.all.data$main_date_time[1]
main.all.data$main_date_time[length(main.all.data$main_date_time)]
appliance.all.data$appliance_date_time[1]
appliance.all.data$appliance_date_time[length(appliance.all.data$appliance_date_time)]

# synchronizing times between mains and appliances and then subsetting datasets to match up things
start.time <- '2011-04-19 00:00:00' # because when we convert it into string it is takes it one hour backward
end.time <- '2011-05-02 23:59:00'

# correcting mains.data
mains.data <- subset(main.all.data, strftime(main.all.data$main_date_time) >= start.time & strftime(main.all.data$main_date_time) <= end.time)
rownames(mains.data) <- NULL # in order to re-define indexes
head(mains.data)
tail(mains.data)

# ploting the data into a graph
plot(mains.data$main_1_power ~ mains.data$main_date_time, type="l", main="REDD: house 1 main 1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(mains.data$main_2_power ~ mains.data$main_date_time, type="l", main="REDD: house 1 main 2", xlab="Date/Time",ylab="Real Power (Watts)")

# correcting appliances.data
appliances.data <- subset(appliance.all.data, strftime(appliance.all.data$appliance_date_time) >= start.time & strftime(appliance.all.data$appliance_date_time) <= end.time)
rownames(appliances.data) <- NULL # in order to re-define indexes
head(appliances.data)
tail(appliances.data)

# plot each appliance and observe if any missing data 
plot(appliances.data$oven_1 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 oven_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$oven_2 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 oven_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$kitchen_outlets_1 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$kitchen_outlets_2 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$kitchen_outlets_3 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$kitchen_outlets_4 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 kitchen_outlets_4", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$lighting_1 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 lighting_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$lighting_2 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 lighting_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$lighting_3 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 lighting_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$washer_dryer_1 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_1", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$washer_dryer_2 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_2", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$washer_dryer_3 ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 washer_dryer_3", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$bathroom_gfi ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 bathroom_gfi", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$stove ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 stove", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$microwave ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 microwave", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$electric_heat ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 electric_heat", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$refrigerator ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 refrigerator", xlab="Date/Time",ylab="Real Power (Watts)")
plot(appliances.data$dishwasher ~ appliances.data$appliance_date_time, type="l", main="REDD: house 1 dishwasher", xlab="Date/Time",ylab="Real Power (Watts)")

# removing appliances that have never been used P.S. ovent_1 removed because its similar to oven_2
appliances.data <- subset(appliances.data, select = c(-oven_1, -kitchen_outlets_1, -washer_dryer_2, -stove, -electric_heat))
head(appliances.data)

######################################## saving the workspace object now... ##################################
# loading from .RData file
load("redd_house_1_001.RData")
##############################################################################################################  

# lets check for missing values in the data i.e. NA if there are any fill them up with forward filling/padding
mains.data[!complete.cases(mains.data),] # list rows which have missing values.
appliances.data[!complete.cases(appliances.data),]

# lets now check which appliances contributed the most in electricity consumption within the home no. 2
total_power_consumption <- sum(mains.data$main_1_power,mains.data$main_2_power)
for(appliance in names(appliances.data)){
  if(appliance=="appliance_date_time")
    next
  # remember i can't do appliances.data$appliance
  contribution <- (100*sum(appliances.data[,appliance]))/total_power_consumption 
  cat(sprintf("%s contirbuted: %.2f in total electricity consumption.\n", appliance, contribution))
}

# removing created objects
rm(house_1_data,appliance,total_power_consumption,contribution)

# The above has not given us right information because mains and appliances have different frequencies, 
# lets now downsize the mains data as per according to appliances

# converting these main..labelled objects into zoo objects in order to do fast computations
mains.data.zoo <- zoo(mains.data[,2:3],mains.data[,1])
head(mains.data.zoo)
head(time(mains.data.zoo))
head(coredata(mains.data.zoo))
head(coredata(mains.data.zoo[,1]))

# converting appliances data into zoo object
appliances.data.zoo <- zoo(appliances.data[,2:14], appliances.data[,1])
head(appliances.data.zoo)
head(time(appliances.data.zoo))
head(coredata(appliances.data.zoo))
head(coredata(appliances.data.zoo[,13]))

# plotting zoo objects
# we can also have different screens=c(1,2,3,4) or screens=names(main.1.appliances.zoo)
plot(appliances.data.zoo, screens=1, main="REDD: Appliances.zoo", xlab="Date/Time", ylab="Real Power", ylim=range(coredata(appliances.data.zoo)), col=c(1:length(colnames(appliances.data.zoo))))
plot(appliances.data.zoo, screens=names(appliances.data.zoo), main="REDD: Appliances.zoo", xlab="Date/Time", ylab=names(appliances.data.zoo), ylim=range(coredata(appliances.data.zoo)), col=c(1:length(colnames(appliances.data.zoo))))

# adding both mains to make one main, combining the appliance data and the main data, this will also downsize the mains as per appliances frequency
# this is because mains are missing some data between 28-14-2011 and 30-04-2011.
house.1.data <- merge(appliances.data.zoo, main_power = rowSums(appliances.data.zoo[,1:13]) + sample(15:20, 1))
head(house.1.data)

# comparing mains total with appliances
par(mar=c(2,4,2,2),mfrow=c(2,1))
plot(appliances.data.zoo, screens=1, main="REDD: Appliances.zoo", xlab="Date/Time", ylab="Real Power", ylim=range(coredata(appliances.data.zoo)), col=c(1:length(colnames(appliances.data.zoo))))
plot(house.1.data[,14])

####################### plotting for testingg
plot(house.1.data[,14], main="REDD: main.zoo", xlab="Date/Time", ylab="Real Power", ylim=range(coredata(house.1.data)), col=c(1:length(colnames(house.1.data))))
plot(appliances.data.zoo, screens=names(appliances.data.zoo), main="REDD: main.combined.zoo", xlab="Date/Time", ylab=sort(names(appliances.data.zoo)), col=as.factor(names(appliances.data.zoo)), cex=.75, cex.lab=0.5, cex.names=0.75, cex.axis=.75, cex.main=.5, cex.sub=.5)
####################### 

# creating labelled dataset now
head(house.1.data)
house.1.labelled <- subset(house.1.data, select = c(-main_power))
head(house.1.labelled)
house.1.labelled <- as.data.frame(house.1.labelled)
colnames(house.1.labelled)
house.1.labelled$date_time <- index(house.1.data)
head(house.1.labelled)
rownames(house.1.labelled) <- NULL # in order to re-define indexes
head(house.1.labelled)
# melting the data frame now
house.1.labelled <- melt(house.1.labelled, id=c("date_time"))
colnames(house.1.labelled) <- c("date_time","appliance","real_power")
head(house.1.labelled)
house.1.labelled <- house.1.labelled[order(house.1.labelled$date_time),] # ordering by date_time
head(house.1.labelled)
house.1.labelled <- subset(house.1.labelled, select=c(date_time, real_power, appliance)) # change column positions
rownames(house.1.labelled) <- NULL # in order to re-define indexes
head(house.1.labelled)

###################################### lets now save redd_house_1_002.RData version  ##################################
# save.image(file="redd_house_1_002.RData") # save redd_house_1_002.RData
load("redd_house_1_002.RData") # load redd_house_1_002.RData
##############################################################################################################  
# creating a ground truth regarding number of steps
house.1.data.steps <- merge(house.1.data, 'ground.step'=0)
head(house.1.data.steps)

ground.step <- "ground.step"

for(appliance in names(house.1.data.steps)){
  if(appliance=="main_power" | appliance=="w.step" | appliance=="t.step" | appliance=="ground.step"| appliance=="m.step" | appliance=="gof.step" | appliance=="glr.step")
    next
  steps <- find.ground.truth.simple.step.changes(coredata(house.1.data.steps[,appliance]), 20, 10, 15, ground.step)
  cat(sprintf("%s:\t steps detected: %i\n", appliance, steps))  
}

# check how many steps in total are considered as ground truth.
length(house.1.data.steps[coredata(house.1.data.steps[,"ground.step"])==1, "main_power"])

save(house.1.data.steps, file="house.1.ground.truth.window-size-10-steps.1914.Rda")
load("house.1.ground.truth.window-size-10-steps.1914.Rda")


####################################################
# conducting the wilcoxon test here for varying window sizes at various critical values

# now create another column for wilcoxon steps
head(house.1.data.steps)
house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
house.1.data.steps <- merge(house.1.data.steps, 'WTstep'=0)

step <- "WTstep"
stepDetectorType <- "WTstep"
ground.truth <- "ground.step" # or ground.step
window.sizes <- c(10)
w.test.results <- data.frame(c.value = numeric(), t.detected = numeric(), c.detected = numeric())
count <- 1
for(w.size in window.sizes){
  c.value <- sum(1:(w.size/2))
  boundary <- (c.value+10)
  while(c.value < boundary){
    house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
    house.1.data.steps <- merge(house.1.data.steps, 'WTstep'=0)
    t.detected <- find.step.changes.wilcoxon.test(coredata(house.1.data.steps[,"main_power"]), 20, w.size, c.value, step) # dataStream, baseLine, slidingWindowSize, lowerTail, step
    c.detected <- evaluate.detected.step.changes(stepDetectorType,ground.truth)
    w.test.results[count,] <- c(c.value,t.detected,c.detected)
    cat(sprintf("w.size: %i, c.value: %i, t.detected: %i, c.detected: %i\n", w.size, c.value, t.detected, c.detected))
    c.value <- c.value + 1
    count <- count + 1
  }
}

# lets now create a complete data frame with metrics
w.test.results
r.copy <- w.test.results
true.steps <- length(house.1.data.steps[coredata(house.1.data.steps[,"ground.step"])==1 ,"ground.step"]) # number of steps ground truth
true.steps
w.test.results <- cbind(w.test.results, precision=(w.test.results$c.detected/w.test.results$t.detected), recall=(w.test.results$c.detected/true.steps))
w.test.results <- cbind(w.test.results, TPP=(w.test.results$c.detected/true.steps), FPP=(w.test.results$t.detected-w.test.results$c.detected)/true.steps)
w.test.results <- cbind(w.test.results, F1.M=(2*(w.test.results$precision)*(w.test.results$recall)/(w.test.results$precision+w.test.results$recall)))
w.test.results

w.test.results$c.value <- c(0:9) # correcting c.values
w.test.results$c.value
w.test.results
save(w.test.results, file="house.1.experiment.window-size-10-w.test.results.against.total.1914.Rda")
load("house.1.experiment.window-size-10-w.test.results.against.total.1914.Rda")
w.test.results


####################################################
# conducting the mean test here for varying window sizes at various critical values
head(house.1.data.steps)
house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
house.1.data.steps <- merge(house.1.data.steps, 'Mstep'=0)
head(house.1.data.steps)
step <- "Mstep"
stepDetectorType <- "Mstep"
ground.truth <- "ground.step"
window.sizes <- c(10)
m.test.results <- data.frame(m.value = numeric(), t.detected = numeric(), c.detected = numeric())
count <- 1
for(w.size in window.sizes){
  m.value <- 20
  boundary <- (m.value+20)
  while(m.value < boundary){
    house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
    house.1.data.steps <- merge(house.1.data.steps, 'Mstep'=0)
    t.detected <- find.step.changes.mean.test(coredata(house.1.data.steps[,"main_power"]), w.size, m.value, step) # data, window_size, tValue=sensitivity level
    c.detected <- evaluate.detected.step.changes(stepDetectorType, ground.truth)
    m.test.results[count,] <- c(m.value,t.detected,c.detected)
    cat(sprintf("w.size: %i, m.value: %f, t.detected: %i, c.detected: %i\n", w.size, m.value, t.detected, c.detected))
    m.value <- m.value + 2
    count <- count + 1
  }
}
# lets now create a complete data frame with metrics
m.test.results
r.copy <- m.test.results
true.steps <- length(house.1.data.steps[coredata(house.1.data.steps[,"ground.step"])==1 ,"ground.step"]) # number of steps ground truth
true.steps
m.test.results <- cbind(m.test.results, precision=(m.test.results$c.detected/m.test.results$t.detected), recall=(m.test.results$c.detected/true.steps))
m.test.results <- cbind(m.test.results, TPP=(m.test.results$c.detected/true.steps), FPP=(m.test.results$t.detected-m.test.results$c.detected)/true.steps)
m.test.results <- cbind(m.test.results, F1.M=(2*(m.test.results$precision)*(m.test.results$recall)/(m.test.results$precision+m.test.results$recall)))
colnames(m.test.results) <- c("m.value","t.detected","c.detected","precision","recall","TPP","FPP","F1.M")
m.test.results
save(m.test.results, file="house.1.experiment.window-size-10-m.test.results.against.total.1914.Rda")
load("house.1.experiment.window-size-10-m.test.results.against.total.1914.Rda")


####################################################
# conducting the glr test here for varying window sizes at various critical values
head(house.1.data.steps)
house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
house.1.data.steps <- merge(house.1.data.steps, 'GLRstep'=0)
head(house.1.data.steps)

step <- "GLRstep"
stepDetectorType <- "GLRstep"
ground.truth <- "ground.step"
window.sizes <- c(20)
glr.test.results <- data.frame(c.value = numeric(), t.detected = numeric(), c.detected = numeric())
count <- 1
for(w.size in window.sizes){
  arl <- 10000
  boundary <- (arl+50000)
  while(arl < boundary){
    
    house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
    house.1.data.steps <- merge(house.1.data.steps, 'GLRstep'=0)
    # experimenting with some code from cpm package guide
    cpm.results <- processStream(coredata(house.1.data.steps[,"main_power"]), cpmType = "ExponentialAdjusted", ARL0 = arl, startup = w.size)
    # now updating the column of zoo object
    house.1.data.steps[cpm.results$changePoints, "GLRstep"] <- 1
    t.detected <- length(cpm.results$changePoints)
    c.detected <- evaluate.detected.step.changes(stepDetectorType, ground.truth)
    glr.test.results[count,] <- c(arl,t.detected,c.detected)
    cat(sprintf("w.size: %i, arl: %f, t.detected: %i, c.detected: %i\n", w.size, arl, t.detected, c.detected))
    arl <<- arl + 10000 
    count <- count + 1
  }
}
glr.test.results
true.steps <- length(house.1.data.steps[coredata(house.1.data.steps[,"ground.step"])==1 ,"ground.step"]) # number of steps ground truth
true.steps
glr.test.results <- cbind(glr.test.results, precision=(glr.test.results$c.detected/glr.test.results$t.detected), recall=(glr.test.results$c.detected/true.steps))
glr.test.results <- cbind(glr.test.results, TPP=(glr.test.results$c.detected/true.steps), FPP=(glr.test.results$t.detected-glr.test.results$c.detected)/true.steps)
glr.test.results <- cbind(glr.test.results, F1.M=(2*(glr.test.results$precision)*(glr.test.results$recall)/(glr.test.results$precision+glr.test.results$recall)))
glr.test.results
glr.test.results$c.valued <- c(5.311597, 5.641865, 5.892006, 6.098075, 6.267886, 6.414406, 6.544534, 6.661286, 7.418244, 7.856646, 8.161091, 8.391914, 8.584902, 8.747343, 8.879759, 9.005970, 9.112663, 9.820501, 10.111950, 10.537080, 10.537080)
rownames(glr.test.results) <- NULL # in order to re-define indexes
colnames(glr.test.results) <- c("ARLOs","t.detected", "c.detected", "precision", "recall", "TPP","FPP", "F1.M", "c.value")
glr.test.results <- glr.test.results[,c("ARLOs", "c.value", "t.detected", "c.detected", "precision", "recall", "TPP","FPP", "F1.M")]
save(glr.test.results, file="house.1.experiment.window-size-20-glr.test.results.against.total.1914.Rda")
load("house.1.experiment.window-size-20-glr.test.results.against.total.1914.Rda")
glr.test.results[,2]


####################################################
# conducting the gof test here for varying threshold values
head(house.1.data.steps)
house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
house.1.data.steps <- merge(house.1.data.steps, 'GOFstep'=0)
head(house.1.data.steps)

step <- "GOFstep"
stepDetectorType <- "GOFstep"
ground.truth <- "ground.step"
window.sizes <- c(10)
gof.test.results <- data.frame(m.value = numeric(), t.detected = numeric(), c.detected = numeric())
count <- 1
for(w.size in window.sizes){
  g.value <- 5
  boundary <- (g.value+50)
  while(g.value < boundary){
    house.1.data.steps <- house.1.data.steps[,1:15] # re construct the object
    house.1.data.steps <- merge(house.1.data.steps, 'GOFstep'=0)
    t.detected <- find.step.changes.gof.test(coredata(house.1.data.steps[,"main_power"]), 20, w.size, g.value, step) # dataStream, baseLine, slidingWindowSize, testThreshold, step
    c.detected <- evaluate.detected.step.changes(stepDetectorType, ground.truth)
    gof.test.results[count,] <- c(g.value,t.detected,c.detected)
    cat(sprintf("w.size: %i, g.value: %f, t.detected: %i, c.detected: %i\n", w.size, g.value, t.detected, c.detected))
    g.value <- g.value + 5
    count <- count + 1
  }
}
# lets now create a complete data frame with metrics
gof.test.results
n.copy <- gof.test.results
true.steps <- length(house.1.data.steps[coredata(house.1.data.steps[,"ground.step"])==1 ,"ground.step"]) # number of steps ground truth
true.steps
gof.test.results <- cbind(gof.test.results, precision=(gof.test.results$c.detected/gof.test.results$t.detected), recall=(gof.test.results$c.detected/true.steps))
gof.test.results <- cbind(gof.test.results, TPP=(gof.test.results$c.detected/true.steps), FPP=(gof.test.results$t.detected-gof.test.results$c.detected)/true.steps)
gof.test.results <- cbind(gof.test.results, F1.M=(2*(gof.test.results$precision)*(gof.test.results$recall)/(gof.test.results$precision+gof.test.results$recall)))
colnames(gof.test.results) <- c("g.value","t.detected","c.detected","precision","recall","TPP","FPP","F1.M")
gof.test.results 
save(gof.test.results, file="house.1.experiment.window-size-10-gof.test.results.against.total.1914.Rda")
# load("house.1.experiment.window-size-10-gof.test.results.against.total.1914.Rda")

# lets write a function to evaluate detected step changes using various algorithms against the ground truth
evaluate.detected.step.changes <- function(stepDetectorType, ground.truth){
  
  stepCount0 <- 0
  stepCount1 <- 0
  stepCount2 <- 0
  stepCount3 <- 0
  stepCount4 <- 0
  stepCount5 <- 0
  
  true.steps <- length(house.1.data.steps[coredata(house.1.data.steps[,ground.truth])==1 ,ground.truth])
  step.detected <- length(house.1.data.steps[coredata(house.1.data.steps[,stepDetectorType])==1 , stepDetectorType])
  
  if(true.steps > step.detected){
    for(index in which(coredata(house.1.data.steps[,stepDetectorType]) %in% 1)){ # lets loop through true event and then see around that index for a match
      # detect any steps with 0 margine
      if((coredata(house.1.data.steps[index,ground.truth])==1)){ # plan   
        stepCount0 <- stepCount0 + 1
      }
      # detect any steps with a margine of -1 n +1 
      else if((coredata(house.1.data.steps[(index-1),ground.truth])==1) | (coredata(house.1.data.steps[(index+1),ground.truth])==1)){
        stepCount1 <- stepCount1 + 1
      }
      # detect any steps with a margine of -2 n +2 
      else if((coredata(house.1.data.steps[(index-2),ground.truth])==1)| (coredata(house.1.data.steps[(index+2),ground.truth])==1)){
        stepCount2 <- stepCount2 + 1
        stepCount2 <- 0 # not considering stepCount 2
      }
      # detect any steps with a margine of -3 n +3 
      else if((coredata(house.1.data.steps[(index-3),ground.truth])==1) | (coredata(house.1.data.steps[(index+3),ground.truth])==1)){
        stepCount3 <- stepCount3 + 1
        stepCount3 <- 0 # not considering stepCount 3     
      } 
      # detect any steps with a margine of -4 n +4 
      else if((coredata(house.1.data.steps[(index-4),ground.truth])==1) | (coredata(house.1.data.steps[(index+4),ground.truth])==1)){
        stepCount4 <- stepCount4 + 1
        stepCount4 <- 0 # not considering stepCount 4
      } 
      # detect any steps with a margine of -5 n +5 
      else if((coredata(house.1.data.steps[(index-5),ground.truth])==1) | (coredata(house.1.data.steps[(index+5),ground.truth])==1)){
        stepCount5 <- stepCount5 + 1
        stepCount5 <- 0 # not considering stepCount 5
        
      } 
    }
  }
  else{  
    for(index in which(coredata(house.1.data.steps[,ground.truth]) %in% 1)){ # lets loop through true event and then see around that index for a match
      # detect any steps with 0 margine
      if((coredata(house.1.data.steps[index,stepDetectorType])==1)){ # plan   
        stepCount0 <- stepCount0 + 1
      }
      # detect any steps with a margine of -1 n +1 
      else if((coredata(house.1.data.steps[(index-1),stepDetectorType])==1) | (coredata(house.1.data.steps[(index+1),stepDetectorType])==1)){
        stepCount1 <- stepCount1 + 1
      }
      # detect any steps with a margine of -2 n +2 
      else if((coredata(house.1.data.steps[(index-2),stepDetectorType])==1)| (coredata(house.1.data.steps[(index+2),stepDetectorType])==1)){
        stepCount2 <- stepCount2 + 1
        stepCount2 <- 0 # not considering stepCount 2
      }
      # detect any steps with a margine of -3 n +3 
      else if((coredata(house.1.data.steps[(index-3),stepDetectorType])==1) | (coredata(house.1.data.steps[(index+3),stepDetectorType])==1)){
        stepCount3 <- stepCount3 + 1
        stepCount3 <- 0 # not considering stepCount 3     
      } 
      # detect any steps with a margine of -4 n +4 
      else if((coredata(house.1.data.steps[(index-4),stepDetectorType])==1) | (coredata(house.1.data.steps[(index+4),stepDetectorType])==1)){
        stepCount4 <- stepCount4 + 1
        stepCount4 <- 0 # not considering stepCount 4
      } 
      # detect any steps with a margine of -5 n +5 
      else if((coredata(house.1.data.steps[(index-5),stepDetectorType])==1) | (coredata(house.1.data.steps[(index+5),stepDetectorType])==1)){
        stepCount5 <- stepCount5 + 1
        stepCount5 <- 0 # not considering stepCount 5
        
      } 
    }
  }
  
  cat(sprintf("Total steps detected: %i => \tstepCount0: %i \tstepCount1: %i \tstepCount2: %i \tstepCount3: %i \tstepCount4: %i \tstepCount5: %i\n", (stepCount0+stepCount1+stepCount2+stepCount3+stepCount4+stepCount5), stepCount0, stepCount1, stepCount2, stepCount3, stepCount4, stepCount5))
  return ((stepCount0+stepCount1+stepCount2+stepCount3+stepCount4+stepCount5))
}


###################################### ground truth labelling simple (non supervised) function #################################

beginFound <- FALSE
stepCount <- 0
find.ground.truth.simple.step.changes <- function(dataStream, baseLine, slidingWindowSize, lowerTail, step){
  streamSize <- length(dataStream)
  # reseting global variables
  beginFound <<- FALSE
  stepCount <<- 0
  # process each stream to find out step changes
  i <- 1
  while(i <= (streamSize-(slidingWindowSize+5))){
    slidingWindow <- dataStream[i:(i+slidingWindowSize-1)]
    ground.truth.simple.test.func( baseLine, slidingWindow, slidingWindowSize, lowerTail, i, step)
    if(beginFound){
      i <- i+ ((slidingWindowSize/2) -1)
    }
    i <- i+1
  }
  cat(sprintf("GROUND TRUTH: Total steps detected: %i\n", stepCount))
  return(stepCount)
}

# t test function for sliding window stream
ground.truth.simple.test.func <- function(baseLine, slidingWindow, windowSize, lowerTail, ithIndex, step){
  x <- slidingWindow[1:(windowSize/2)]
  y <- slidingWindow[((windowSize/2)+1):windowSize]   
  
  # combine both samples
  xy <- c(x,y)
  
  # now compute ranks and rank sum for each sample
  ranks <- rank(xy)
  R1 <- sum(ranks[1:length(x)])
  R2 <- sum(ranks[(length(x)+1):length(xy)])
  
  # variables for computing Zt?
  n1 <- length(x)
  n2 <- length(y)
  N <- length(xy)
  MinR <- min(R1, R2)
  
  # calculate the mean of both samples
  mean1 <- mean(x)
  mean2 <- mean(y)
  diff <- abs(mean1-mean2)
  
  # now check if if step event is found then do the following R1 against lower and upper tail values for samples 5x5 its 19 and 36
  if((MinR <= lowerTail) & (prod(abs(x-y) >= baseLine))){
    stepCount <<- stepCount+1
    beginFound <<- TRUE    
    if((mean2-mean1) > 0){
      house.1.data.steps[(ithIndex+(windowSize/2)), step] <<- 1      
    }else{      
      house.1.data.steps[(ithIndex+(windowSize/2) -1), step] <<- 1      
    }
  }
  else{
    beginFound <<- FALSE
  }
}


beginFound <- FALSE
stepCount <- 0
find.step.changes.wilcoxon.test <- function(dataStream, baseLine, slidingWindowSize, lowerTail, step){
  streamSize <- length(dataStream)
  # reseting global variables
  beginFound <<- FALSE
  stepCount <<- 0
  # process each stream to find out step changes
  i <- 1
  while(i <= (streamSize-slidingWindowSize )){
    slidingWindow <- dataStream[i:(i+slidingWindowSize-1)]
    wilcoxon.test.func( baseLine, slidingWindow, slidingWindowSize, lowerTail, i, step)
    if(beginFound){
      i <- i+ ((slidingWindowSize/2) -1)
    }
    i <- i+1
  }
  cat(sprintf("WILCOXON: Total steps detected: %i\n", stepCount))
  return(stepCount)
}

# t test function for sliding window stream
wilcoxon.test.func <- function(baseLine, slidingWindow, windowSize, lowerTail, ithIndex, step){
  x <- slidingWindow[1:(windowSize/2)]
  y <- slidingWindow[((windowSize/2)+1):windowSize]   
  
  # combine both samples
  xy <- c(x,y)
  
  # now compute ranks and rank sum for each sample
  ranks <- rank(xy)
  R1 <- sum(ranks[1:length(x)])
  R2 <- sum(ranks[(length(x)+1):length(xy)])
  
  # variables for computing Zt?
  n1 <- length(x)
  n2 <- length(y)
  N <- length(xy)
  MinR <- min(R1, R2)
  
  # calculate the mean of both samples
  mean1 <- mean(x)
  mean2 <- mean(y)
  diff <- abs(mean1-mean2)
  
  # now check if if step event is found then do the following R1 against lower and upper tail values for samples 5x5 its 19 and 36
  if((MinR <= lowerTail) &  (prod(abs(x-y) >= baseLine))){
    stepCount <<- stepCount+1
    beginFound <<- TRUE    
    if((mean2-mean1) > 0){
      house.1.data.steps[(ithIndex+(windowSize/2)), step] <<- 1      
    }else{      
      house.1.data.steps[(ithIndex+(windowSize/2) -1), step] <<- 1      
    }
  }
  else{
    beginFound <<- FALSE
  }
}

#################### GOF TEST #####
find.step.changes.gof.test <- function(dataStream, baseLine, slidingWindowSize, testThreshold, step){
  
  streamSize <- length(dataStream)
  # reseting global variables
  beginFound <- FALSE
  stepCount <- 0
  # process each stream to find out step changes
  i <- 1
  while(i <= (streamSize-slidingWindowSize)){
    slidingWindow <- dataStream[i:(i+slidingWindowSize-1)]
    x <- slidingWindow[1:(slidingWindowSize/2)]
    y <- slidingWindow[((slidingWindowSize/2)+1):slidingWindowSize]    
    
    # calculating means
    mean1 <- mean(x)
    mean2 <- mean(y)
    diff <- abs(mean1-mean2)
    
    # calculating chi square gof here vector y is observed and vector x is expected frequency/values
    n <- length(x)
    total <- sum(x)
    E <- (1/n)*total
    STATISTIC <- sum((y - E)^2/E)
    if(is.na(STATISTIC)){
      STATISTIC <- 0
    }
    # &  (prod(abs(x-y) >= 20))
    if((STATISTIC >= testThreshold) & diff > baseLine){
      stepCount <- stepCount+1
      
      if((mean2-mean1) > 0){
        house.1.data.steps[(i+(slidingWindowSize/2)), step] <<- 1      
      }else{      
        house.1.data.steps[(i+(slidingWindowSize/2) -1), step] <<- 1      
      }
      i <- i+((slidingWindowSize/2) -1)
    }
    else{
      # do nothing if event is not found move to next reading
    }
    i <- i+1    
  }
  cat(sprintf("GOF: Total steps detected: %i\n", stepCount))
  return(stepCount)  
}


#################### MEAN BASED #####

find.step.changes.mean.test <- function(dataStream, slidingWindowSize, threshold, step){
  streamSize <- length(dataStream)
  # reseting global variables
  beginFound <- FALSE
  stepCount <- 0
  # process each stream to find out step changes
  i <- 1
  while(i <= (streamSize-slidingWindowSize)){
    slidingWindow <- dataStream[i:(i+slidingWindowSize-1)]
    x <- slidingWindow[1:(slidingWindowSize/2)]
    y <- slidingWindow[((slidingWindowSize/2)+1):slidingWindowSize]    
    # calculating means
    mean1 <- mean(x)
    mean2 <- mean(y)
    diff <- abs(mean1-mean2)
    if (diff >= threshold){
      stepCount <- stepCount+1
      if((mean2-mean1) > 0){
        house.1.data.steps[(i+(slidingWindowSize/2)), step] <<- 1      
      }else{      
        house.1.data.steps[(i+(slidingWindowSize/2) -1), step] <<- 1      
      }
      i <- i+((slidingWindowSize/2) -1)
    }
    i <- i+1    
  }
  cat(sprintf("MEAN: Total steps detected: %i\n", stepCount))
  return(stepCount)
}
